//
// Copyright 2019 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "./variables";
@use "@tyler-forge/theme/variables" as theme-variables;
// @use "@material/feature-targeting/functions" as feature-targeting-functions;

///
/// Sets the elevation values.
///
/// @param {String} $z-value - The logical elevation levels. Must be between 0 and 24.
/// @param {String} $color - The color of the elevation shadow.
// If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
// $opacity-boost.
/// @return {String}
///
@function elevation-values($z-value, $color: variables.$baseline-color, $opacity-boost: 0) {
  @if meta.type-of($z-value) != number or not math.is-unitless($z-value) {
    @error '$z-value must be a unitless number, but received "#{$z-value}"';
  }

  @if $z-value < 0 or $z-value > 24 {
    @error '$z-value must be between 0 and 24, but received "#{$z-value}"';
  }

  // $feat-color: feature-targeting-functions.create-target($query, color);

  $color: theme-variables.prop-value($color);

  $umbra-z-value: map.get(variables.$umbra-map, $z-value);
  $penumbra-z-value: map.get(variables.$penumbra-map, $z-value);
  $ambient-z-value: map.get(variables.$ambient-map, $z-value);

  $umbra-color: rgba($color, variables.$umbra-opacity + $opacity-boost);
  $penumbra-color: rgba($color, variables.$penumbra-opacity + $opacity-boost);
  $ambient-color: rgba($color, variables.$ambient-opacity + $opacity-boost);

  @return #{$umbra-z-value} #{$umbra-color}, #{$penumbra-z-value} #{$penumbra-color}, #{$ambient-z-value} #{$ambient-color};
}

///
/// Sets the elevation transition value.
///
/// @param {String} $duration - The duration of the transition.
/// @param {String} $easing - The easing function for the transition.
/// @return {String}
///
@function transition-value(
  $duration: variables.$transition-duration,
  $easing: variables.$transition-timing-function) {
  @return #{variables.$property} #{$duration} #{$easing};
}

///
/// Sets the elevation overlay transition value.
///
/// @param {String} $duration - The duration of the transition.
/// @param {String} $easing - The easing function for the transition.
/// @return {String}
///
@function overlay-transition-value(
  $duration: variables.$transition-duration,
  $easing: variables.$transition-timing-function) {
  @return #{variables.$overlay-property} #{$duration} #{$easing};
}
