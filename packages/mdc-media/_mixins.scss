// Copyright 2017 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "./variables";

// returns the lower media boundary or null if the smallest media is selected
@function breakpoint-min($size) {
  @if not map.has-key(variables.$breakpoints, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$breakpoints)}";
  }
  $min: map.get(variables.$breakpoints, $size);

  @return if($min > 0, $min, null);
}

// returns the upper media boundary or null if the largest media is selected
@function breakpoint-max($size) {
  @if not map.has-key(variables.$breakpoints, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$breakpoints)}";
  }
  $names: map.keys(variables.$breakpoints);
  $n: list.index($names, $size);
  $len: list.length(variables.$breakpoints);
  $next: if($n < $len, list.nth($names, $n + 1), null);
  @return if($next, (breakpoint-min($next) - 1px), null);
}


@mixin min($size) {
  @if not map.has-key(variables.$breakpoints, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$breakpoints)}";
  }
  $min: breakpoint-min($size);
  @media (min-width: $min) {
    @content;
  }
}

@mixin max($size) {
  @if not map.has-key(variables.$breakpoints, $size) {
    @error "Invalid style specified! Choose one of #{map.keys(variables.$breakpoints)}";
  }
  $max: breakpoint-max($size);
  @media (max-width: $max) {
    @content;
  }
}

// Private mixins, meant for internal use.
// @mixin media-query_($size) {
//   @if not map.has-key(variables.$breakpoints, $size) {
//     @error "Invalid style specified! Choose one of #{map.keys(variables.$breakpoints)}";
//   }

//   $min: breakpoint-min($size);
//   $max: breakpoint-max($size);

//   @if $min == null and $max != null {
//     // Phone
//     @media (max-width: $max) {
//       @content;
//     }
//   } @else if $min != null and $max != null {
//     // Tablet
//     @media (min-width: $min) and (max-width: $max) {
//       @content;
//     }
//   } @else if $min != null and $max == null {
//     // Desktop
//     @media (min-width: $min) {
//       @content;
//     }
//   } @else {
//     // Fallback - no breakpoints defined
//     @content;
//   }
// }

